'use strict';

var urls, client, args, mon, nconf, channels, monitor, monitors;

function toHumanDate( str ) {
	var d = new Date( str );
	return d.toString('dddd MMMM dS, yyyy') + ' at ' + d.toString('h:mm tt');
}

function sendMsg( cmd, from ) {
	var l, st = '', ii, ll;
	for ( l in urls ) {
		if ( urls.hasOwnProperty( l ) ) {
			ll = urls[l].phrases.length;
			for ( ii = 0; ii < ll; ii++ ) {
				if ( urls[l].phrases[ ii ] === cmd ) {
					st = '';
					if ( urls[l].date ) {
						st += 'last update for "' + l + '" was ' +
							toHumanDate( urls[l].date );
					} else {
						st += 'Nothing recorded for "' + cmd + '"';
					}
					client.say( from, st );
				}
			}
		}
	}
}

function processMsg( from, msg ) {
	var a, i, l, c = '';
	if ( msg.match( args.n + ':' ) ) {
		a = msg.split( ' ' );
		l = a.length;
		for ( i = 1; i < l; i++ ) {
			c += a[i] + ' ';
		}
		c = c.trim();
		sendMsg( c, from );
	}
}

function createMon( m ) {
	mon.create( 'http', m );

	mon.on( m.name, function( r ) {
		nconf.set( 'urls:' + r.name + ':date', r.date );

		nconf.save();

		channels.forEach( function( c ) {
			client.say( c, urls[ r.name ].msg );
		});
	});

	monitors.push( mon.monitor() );
}


var name, o;
for ( name in urls ) {
	if ( urls.hasOwnProperty( name ) ) {
		o = urls[ name ];
		o.name = name;

		createMon( o );
	}
}
